r = replicate(B,sum(sample(1:6, n, replace = TRUE) == 6))
sum(r >= k)/B  # estimate probability
mean(r >= k)   # mean of Indicators
prev <- 0.50	# prevalence = P(L)
sens <- 0.80	# sensitivity = P(+|L)
spec <- .90		# specificity = 1 - P(+|L^c)
reps <- 10000
true.pos.test.pos <- 0	# counter for lie detector catching a truly lying person
test.pos <- 0		# counter for lie detector says person is lying
for(i in 1:reps){
# simulate a person as lying or not
lie <- 0
if(runif(1) < prev){
lie <- 1
}
# if lying simulate if test positive or not
if(lie == 1 ){
if(runif(1) <= sens){
test.pos <- test.pos + 1
true.pos.test.pos <- true.pos.test.pos + 1
}
}
# if not lying simulate if test positive or not
else{
if(runif(1) <= (1-spec)) test.pos <- test.pos + 1
}
}
# simulated probability
true.pos.test.pos/test.pos
# number of iterations of the simulation
B = 100000
# Bernoulli sampling, so n = 1
n = 1
# test properties
pi.prob = 0.01     # P(D)
eta.prob = 0.80     # P(+|D)
theta.prob = 0.95  # P(-|D^c)
# simulate if someone has the disease, x = 1 if D, x = 0 if D^c
x = rbinom(B,n,pi.prob)  # Bernoulli or Indicator of D
# estimate of P(D)
sum(x == 1)/B
# simulate the test result using the, y = 1 if +, y = 0 if -
# the probability of success dependent on D or D^c
y = rbinom(B,n,eta.prob*x + (1-theta.prob)*(1-x))  # Bernoulli
# estimate of P(D|+) = n.pd / n.p
sum(y == 1 & x == 1)/sum(y == 1)
x = rbinom(B,n,pi.prob)  # Bernoulli or Indicator of D
sum(x == 1)/B            # estimate of P(D)
# simulate the test result using the, y = 1 if +, y = 0 if -
# the probability of success dependent on D or D^c
y = rbinom(B,n,eta.prob*x + (1-theta.prob)*(1-x))  # Bernoulli
sum(y == 1 & x == 1)/sum(y == 1)  # estimate of P(D|+) = n.pd / n.p
B = 100000  # Number of iterations
# Simulating the Item-Matching Problem
n = 24       # Number of items to match
s = numeric(B)
for(i in 1:B){
perm = sample(1:n)  # Random permuation
s[i] = sum(perm == 1:n)
}
mean(s)
sd(s)
cutp = 0:10 - 0.5
hist(s, breaks=cutp, prob=T)
# an alterative plot
plot(table(r))
# Simulating the Coupon-Collecting Problem
n = 6   # also try 20
w = numeric(B)
for(i in 1:B){
got = sample(1:n, n, repl=T)
u = length(unique(got))
while(u < n){
got = c(got, sample(1:n, 1))
# get another
u = length(unique(got))
}
w[i] = length(got)
}
mean(w)
sd(w)
mean(w > 100)   # computed for the second example when n = 20
cutp = 0:(max(w)+1) - 0.5
hist(w, breaks=cutp, prob=T, main="Histogram of W for n = 6")
# an alterative plot
plot(table(w))
B = 100000  # Number of iterations
# Simulating the Item-Matching Problem
n = 24       # Number of items to match
s = numeric(B)
for(i in 1:B){
perm = sample(1:n)  # Random permuation
s[i] = sum(perm == 1:n)
}
mean(s)
sd(s)
cutp = 0:10 - 0.5
hist(s, breaks=cutp, prob=T)
# an alterative plot
plot(table(r))
# Simulating the Coupon-Collecting Problem
n = 6   # also try 20
w = numeric(B)
for(i in 1:B){
got = sample(1:n, n, replace=T)
u = length(unique(got))
while(u < n){
got = c(got, sample(1:n, 1))
# get another
u = length(unique(got))
}
w[i] = length(got)
}
mean(w)
sd(w)
mean(w > 100)   # computed for the second example when n = 20
cutp = 0:(max(w)+1) - 0.5
hist(w, breaks=cutp, prob=T, main="Histogram of W for n = 6")
# an alterative plot
plot(table(w))
for(i in 1:B){
got = sample(1:n, n, replace=TRUE)
u = length(unique(got))
while(u < n){
got = c(got, sample(1:n, 1))
# get another
u = length(unique(got))
}
w[i] = length(got)
}
mean(w)
sd(w)
mean(w > 100)
cutp = 0:(max(w)+1) - 0.5
hist(w, breaks=cutp, prob=T, main="Histogram of W for n = 6")
# an alterative plot
plot(table(w))
B = 100000  # Number of iterations
# Simulating the Item-Matching Problem
n = 24       # Number of items to match
r = replicate(B, sum(sample(n) == (1:n)))
# Histogram of the scores on an item-matching test with n items
mean(r)
sd(r)
barplot(table(r))
pnorm(2)
x=seq(1:5, 10)
x=seq(1, 10)
x
x=seq(1, 10,100)
x
x=sample(c(1:10),100)
x=(0,5,length=100)
x=seq(0,5,length=100)
hx1=rexp(x,1)
hx1=rexp(x,1)
plot(x,hx1)
hx1=dexp(x,1)
plot(x,hx1)
x2=seq(-5,5,length=100)
hx2=0.5*dexp(abs(x),1)
plot(x2,hx2)
lines(x,hx1)
hx2=0.5*dexp(abs(x2),1)
plot(x2,hx2,type='l')
lines(x,hx1)
plot(x2,hx2,type='l', ylim=c(0,1))
lines(x,hx1)
plot(x2,hx2,type='l', ylim=c(0,1),lty=1)
lines(x,hx1, lty=2)
plot(x2,hx2,type='l', ylim=c(0,1),lty=1, xlab='x', ylab='f(x)'
lines(x,hx1, lty=2)
plot(x2,hx2,type='l', ylim=c(0,1),lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,1,length=100)
hx1=dbeta(x,4,98)
plot(x,hx1)
x2=seq(0,1,length=100)
hx2=dbeta(x2,3.5,102)
plot(x2,hx2,type='l', ylim=c(0,1),lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,1,length=100)
hx1=dbeta(x,4,98)
plot(x,hx1)
x2=seq(0,1,length=100)
hx2=dbeta(x2,3.5,102)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,20,length=100)
hx1=dgamma(x,20.25,102.25)
plot(x,hx1)
x2=seq(0,20,length=100)
hx2=dgamma(x2,20.25,102.025)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,10,length=100)
hx1=dgamma(x,20.25,102.25)
plot(x,hx1)
x2=seq(0,10,length=100)
hx2=dgamma(x2,20.25,102.025)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,1,length=100)
hx1=dgamma(x,20.25,102.25)
plot(x,hx1)
x2=seq(0,1,length=100)
hx2=dgamma(x2,20.25,102.025)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,0.4,length=100)
hx1=dgamma(x,20.25,102.25)
plot(x,hx1)
x2=seq(0,0.4,length=100)
hx2=dgamma(x2,20.25,102.025)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
x=seq(0,0.2,length=100)
hx1=dbeta(x,4,98)
plot(x,hx1)
x2=seq(0,0.2,length=100)
hx2=dbeta(x2,3.5,102)
plot(x2,hx2,type='l',lty=1, xlab='x', ylab='f(x)')
lines(x,hx1, lty=2)
X=rnorm(500)
Y=rnorm(500)
Z=X/Y
hist(Z)
hist(Z, xlim=c(-10,10))
hist(Z, xlim=c(-10,10), breaks=10)
hist(Z, xlim=c(-10,10), breaks=5)
cummean(Z)
install.packages('gmcm')
install.packages('GMCM')
library("GMCM", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
CM=cummean(Z)
for (i in 1:500){}
X=rnorm(500)
Y=rnorm(500)
Z=X/Y
cm=[]
for (i in 1:500){
cm[i]=mean(Z[1:i])
}
cm=[0]*500
for (i in 1:500){
cm[i]=mean(Z[1:i])
}
cm=list(500)
for (i in 1:500){
cm[i]=mean(Z[1:i])
}
cm
plot(cm)
plot(cm,c(1:500))
plot(c(1:500),cm)
plot(c(1:500),cm, lty=1)
plot(c(1:500),cm, type='l')
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# This R program transforms independent BVN to (X1,X2) correlated BVN (W1,W2)
n = 2000
# The goal is to simulate the the
muw1 = 10
muw2 = 25
sigmaw1 = 2
sigmaw2 = 3
sigmasqw1 = sigmaw1^2
sigmasqw2 = sigmaw2^2
rhow1w2 = -0.4
covw1w2 = rhow1w2*sigmaw1*sigmaw2
# plot the BVN
mu1<-muw1 # setting the expected value of x1
mu2<-muw2 # setting the expected value of x2
s11<-sigmasqw1 # setting the variance of x1
s12<-covw1w2 # setting the covariance between x1 and x2
s22<-sigmasqw2 # setting the variance of x2
rho<-rhow1w2 # setting the correlation coefficient between x1 and x2
x1<-seq(mu1-10,mu1+10,length=41) # generating the vector series x1
x2<-seq(mu2-10,mu2+10,length=41)
f<-function(x1,x2){
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))
term2 <- -1/(2*(1-rho^2))
term3 <- (x1-mu1)^2/s11
term4 <- (x2-mu2)^2/s22
term5 <- -2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))
term1*exp(term2*(term3+term4-term5))
} # setting up the function of the multivariate normal density
z<-outer(x1,x2,f) # calculating the density values
persp(x1, x2, z,
main="Two dimensional Normal Distribution",
sub=expression(italic(f)~(bold(x))==frac(1,2~pi~sqrt(sigma[11]~
sigma[22]~(1-rho^2)))~phantom(0)~exp~bgroup("{",
list(-frac(1,2(1-rho^2)),
bgroup("[", frac((x[1]~-~mu[1])^2, sigma[11])~-~2~rho~frac(x[1]~-~mu[1],
sqrt(sigma[11]))~ frac(x[2]~-~mu[2],sqrt(sigma[22]))~+~
frac((x[2]~-~mu[2])^2, sigma[22]),"]")),"}")),
col="lightgreen",
theta=30, phi=20,
r=50,
d=0.1,
expand=0.5,
ltheta=90, lphi=180,
shade=0.75,
ticktype="detailed",
nticks=5) # produces the 3-D plot
# adding a text line to the graph
mtext(expression(list(mu[1]==10,mu[2]==25,sigma[11]==2,sigma[22]==3,sigma[12]==-2.4,rho==-0.4)), side=3)
install.packages('gplot')
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# plot the BVN
mu1<-muw1 # setting the expected value of x1
mu2<-muw2 # setting the expected value of x2
s11<-sigmasqw1 # setting the variance of x1
s12<-covw1w2 # setting the covariance between x1 and x2
s22<-sigmasqw2 # setting the variance of x2
rho<-rhow1w2 # setting the correlation coefficient between x1 and x2
x1<-seq(mu1-10,mu1+10,length=41) # generating the vector series x1
x2<-seq(mu2-10,mu2+10,length=41)
f<-function(x1,x2){
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))
term2 <- -1/(2*(1-rho^2))
term3 <- (x1-mu1)^2/s11
term4 <- (x2-mu2)^2/s22
term5 <- -2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))
term1*exp(term2*(term3+term4-term5))
} # setting up the function of the multivariate normal density
z<-outer(x1,x2,f) # calculating the density values
persp(x1, x2, z,
main="Two dimensional Normal Distribution",
sub=expression(italic(f)~(bold(x))==frac(1,2~pi~sqrt(sigma[11]~
sigma[22]~(1-rho^2)))~phantom(0)~exp~bgroup("{",
list(-frac(1,2(1-rho^2)),
bgroup("[", frac((x[1]~-~mu[1])^2, sigma[11])~-~2~rho~frac(x[1]~-~mu[1],
sqrt(sigma[11]))~ frac(x[2]~-~mu[2],sqrt(sigma[22]))~+~
frac((x[2]~-~mu[2])^2, sigma[22]),"]")),"}")),
col="lightgreen",
theta=30, phi=20,
r=50,
d=0.1,
expand=0.5,
ltheta=90, lphi=180,
shade=0.75,
ticktype="detailed",
nticks=5) # produces the 3-D plot
# adding a text line to the graph
mtext(expression(list(mu[1]==10,mu[2]==25,sigma[11]==2,sigma[22]==3,sigma[12]==-2.4,rho==-0.4)), side=3)
install.packages('gplots')
install.packages('IDPmisc')
# simulate independent random uniforms
u1 = runif(n)
u2 = runif(n)
X11()
par(mfrow=c(2,2))
hist(u1);hist(u2);plot(u1,u2)
umean = c(mean(u1),mean(u2));umean
usd = c(sd(u1),sd(u2));usd
ucor = cor(u1,u2);ucor
# This R program transforms independent BVN to (X1,X2) correlated BVN (W1,W2)
n = 2000
# The goal is to simulate the the
muw1 = 10
muw2 = 25
sigmaw1 = 2
sigmaw2 = 3
sigmasqw1 = sigmaw1^2
sigmasqw2 = sigmaw2^2
rhow1w2 = -0.4
covw1w2 = rhow1w2*sigmaw1*sigmaw2
n = 2000
# The goal is to simulate the the
muw1 = 10
muw2 = 25
sigmaw1 = 2
sigmaw2 = 3
sigmasqw1 = sigmaw1^2
sigmasqw2 = sigmaw2^2
rhow1w2 = -0.4
covw1w2 = rhow1w2*sigmaw1*sigmaw2
mu1<-muw1 # setting the expected value of x1
mu2<-muw2 # setting the expected value of x2
s11<-sigmasqw1 # setting the variance of x1
s12<-covw1w2 # setting the covariance between x1 and x2
s22<-sigmasqw2 # setting the variance of x2
rho<-rhow1w2 # setting the correlation coefficient between x1 and x2
x1<-seq(mu1-10,mu1+10,length=41) # generating the vector series x1
x2<-seq(mu2-10,mu2+10,length=41)
f<-function(x1,x2){
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))
term2 <- -1/(2*(1-rho^2))
term3 <- (x1-mu1)^2/s11
term4 <- (x2-mu2)^2/s22
term5 <- -2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))
term1*exp(term2*(term3+term4-term5))
} # setting up the function of the multivariate normal density
z<-outer(x1,x2,f) # calculating the density values
persp(x1, x2, z, main="Two dimensional Normal Distribution",
sub=expression(italic(f)~(bold(x))==frac(1,2~pi~sqrt(sigma[11]~sigma[22]~(1-rho^2)))
~phantom(0)~exp~bgroup("{", list(-frac(1,2(1-rho^2)),
bgroup("[", frac((x[1]~-~mu[1])^2, sigma[11])~-~2~rho~frac(x[1]~-~mu[1],
sqrt(sigma[11]))~ frac(x[2]~-~mu[2],sqrt(sigma[22]))~+~
frac((x[2]~-~mu[2])^2, sigma[22]),"]")),"}")),
col="lightgreen", theta=30, phi=20,r=50,d=0.1,expand=0.5,ltheta=90, lphi=180,
shade=0.75, ticktype="detailed", nticks=5) # produces the 3-D plot
# adding a text line to the graph
mtext(expression(list(mu[1]==10,mu[2]==25,sigma[11]==2,sigma[22]==3,sigma[12]==-2.4,rho==-0.4)), side=3)
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mu1<-muw1 # setting the expected value of x1
mu2<-muw2 # setting the expected value of x2
s11<-sigmasqw1 # setting the variance of x1
s12<-covw1w2 # setting the covariance between x1 and x2
s22<-sigmasqw2 # setting the variance of x2
rho<-rhow1w2 # setting the correlation coefficient between x1 and x2
x1<-seq(mu1-10,mu1+10,length=41) # generating the vector series x1
x2<-seq(mu2-10,mu2+10,length=41)
f<-function(x1,x2){
term1 <- 1/(2*pi*sqrt(s11*s22*(1-rho^2)))
term2 <- -1/(2*(1-rho^2))
term3 <- (x1-mu1)^2/s11
term4 <- (x2-mu2)^2/s22
term5 <- -2*rho*((x1-mu1)*(x2-mu2))/(sqrt(s11)*sqrt(s22))
term1*exp(term2*(term3+term4-term5))
} # setting up the function of the multivariate normal density
z<-outer(x1,x2,f) # calculating the density values
persp(x1, x2, z, main="Two dimensional Normal Distribution",
sub=expression(italic(f)~(bold(x))==frac(1,2~pi~sqrt(sigma[11]~sigma[22]~(1-rho^2)))
~phantom(0)~exp~bgroup("{", list(-frac(1,2(1-rho^2)),
bgroup("[", frac((x[1]~-~mu[1])^2, sigma[11])~-~2~rho~frac(x[1]~-~mu[1],
sqrt(sigma[11]))~ frac(x[2]~-~mu[2],sqrt(sigma[22]))~+~
frac((x[2]~-~mu[2])^2, sigma[22]),"]")),"}")),
col="lightgreen", theta=30, phi=20,r=50,d=0.1,expand=0.5,ltheta=90, lphi=180,
shade=0.75, ticktype="detailed", nticks=5) # produces the 3-D plot
# adding a text line to the graph
mtext(expression(list(mu[1]==10,mu[2]==25,sigma[11]==2,sigma[22]==3,sigma[12]==-2.4,rho==-0.4)), side=3)
boxplot(car)
boxplot(cars)
(130-27)/(1.3*10**5-1*10**5)
1/0.003433333
e^2
setwd("~/Desktop/Udacity/stroop")
data=read.csv(stroopdata.csv, header = TRUE)
data=read.csv('stroopdata.csv', header = TRUE)
summary(data)
boxplot(data)
qqplot(data$congruent)
qqplot(sort(data$congruent))
qqnorm(data$congruent)
data$Congruent
qqnorm(data$Congruent)
hist(data$Congruent)
length(data)
length(data$Congruent)
hist(data$Incongruent)
summary(data)
table(summary(data))
data.table
stat.desc(data)
install.packages('pastecs')
stat.desc(data)
library(pastecs)
stat.desc(data)
boxplot(data)
boxplot(data, main='BOx')
hist(data$Congruent, col='red', main='Histogram of Stroopdata')
hist(data$Incongruent, col='blue', add=TRUE)
hist(data$Congruent, prob=TRUE,col='red', main='Histogram of Stroopdata')
hist(data$Incongruent, prob=TRUE, col='blue', add=TRUE)
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata')
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(0,40))
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40))
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40))
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
lines(density(data$Congruent))
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40))
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
lines(density(data$Congruent), col='red')
lines(density(data$Incongruent), col='blue')
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40), xlab='')
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
lines(density(data$Congruent), col='red')
lines(density(data$Incongruent), col='blue')
hist(data$Congruent,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40), xlab='')
hist(data$Incongruent, col=rgb(0,0,1,0.5), add=TRUE)
lines(density(data$Congruent), col='red')
lines(density(data$Incongruent), col='blue')
hist(data$Congruent, prob=TRUE,col=rgb(1,0,0,0.5), main='Histogram of Stroopdata',xlim=c(5,40), xlab='')
hist(data$Incongruent, prob=TRUE, col=rgb(0,0,1,0.5), add=TRUE)
lines(density(data$Congruent), col='red')
lines(density(data$Incongruent), col='blue')
data=read.csv('stroopdata.csv', header = TRUE)
stat.desc(data)
t.test(data$Congurent, data$Incongurent, paired = TRUE)
t.test(data$Congurent, data$Incongruent, paired = TRUE)
t.test(data$Congruent, data$Incongruent, paired = TRUE)
data=read.csv('stroopdata.csv', header = TRUE)
Congruent=data$Congruent
Incongruent=data$Incongruent
summary(data)
t.test(Congruent, Incongruent, paired = TRUE)
t.test(Congruent, Incongruent, paired = TRUE,alt='less')
t.test(Congruent, Incongruent, paired = TRUE, alt='greater')
t.test(Congruent, Incongruent, paired = TRUE, alt='less')
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
knit_with_parameters('~/Desktop/Udacity/stroop/stroop.Rmd')
install_github("rstudio/rmarkdown")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
system("pdflatex --version")
